//
// 파일명 : CScene.cpp
// 
// 설명 : CScene 클래스 정의
//
// 김성후(lonkth@naver.com)
// 2010.01.20 최종 수정
//


#include "CScene.h"


//////////////////////////////////////////////////////////////////////////////////////////
// CScene(SceneParamaterBundle sceneParam)
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CScene 클래스의 생성자.
//		  상속받을 클래스들에서 공통적으로 사용할 데이터들을 받는다.
//
// 2010.01.20 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

CScene::CScene(SceneParamaterBundle sceneParam) : screenWidth(sceneParam.screenWidth), screenHeight(sceneParam.screenHeight)
{
	hWnd = sceneParam.hWnd;
	hInst = sceneParam.hInst;
	pD3D = sceneParam.pD3D;
	pd3dDevice = sceneParam.pd3dDevice;
	sceneKind = sceneParam.sceneKind;
	pData = sceneParam.pData;
	pFont = sceneParam.pFont;

	D3DXCreateSprite(pd3dDevice, &sprite);
	D3DXCreateTextureFromFile(pd3dDevice, "Texture\\Common\\Black.jpg", &tBlack); //1024*768 크기의 시꺼면 이미지로 FadeInOut를 비롯한 여러곳에 유용하게 쓰임
	cursor = new CCursor(pd3dDevice, hWnd, sprite);
	dshow = new CDXShow;
}


//////////////////////////////////////////////////////////////////////////////////////////
// ~CScene()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CScene 클래스의 소멸자.
//		  할당한 데이터들을 해제한다.
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

CScene::~CScene()
{
	sprite->Release();
	tBlack->Release();
	delete cursor;
	delete dshow;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
// void DrawTexture(LPDIRECT3DTEXTURE9 pTexture, int x, int y, int x1, int y1, int x2, int y2, int alpha)
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 텍스쳐를 뿌려주는 랩핑함수.
//		  sprite의 Draw함수를 편리하게 이용하기 위해 묶은 함수이다.
//
// 인자 : 순서대로 텍스쳐, 왼쪽위모서리의 x좌표, 왼쪽위모서리의 y좌표,
//		  텍스쳐에서의 왼쪽위모서리 x좌표, 왼쪽위모서리 y좌표,
//		  오른쪽아래모서리 x좌표, 오른쪽아래모서리 y좌표,
//		  투명도(0~100)
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CScene::DrawTexture(LPDIRECT3DTEXTURE9 pTexture, int x, int y, int x1, int y1, int x2, int y2, int alpha)
{
	sprite->Begin(D3DXSPRITE_ALPHABLEND);
	RECT rc = {x1, y1, x2, y2};
	D3DXVECTOR3 pos((float) x, (float) y, 0);
	sprite->Draw(pTexture, &rc, NULL, &pos, D3DCOLOR_RGBA(255, 255, 255, 255 * alpha / 100));
	sprite->End();
}


//////////////////////////////////////////////////////////////////////////////////////////
// void FadeIn()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 화면을 페이드인 시키는 함수
//		  비동기적으로 작동(Render()를 거치지않고 여기서 계속 루프)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

void CScene::FadeIn()
{
	for (int step = 0; step < 100; step++) //100단계(%)
	{
		pd3dDevice->Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0, 0, 0), 1.0f, 0);
		if (SUCCEEDED(pd3dDevice->BeginScene()))
		{
			Render();
			DrawTexture(tBlack, 0, 0, 0, 0, screenWidth, screenHeight, step);
			pd3dDevice->EndScene();
		}
		pd3dDevice->Present(NULL, NULL, NULL, NULL);
	}
	Sleep(200);
}


//////////////////////////////////////////////////////////////////////////////////////////
// void FadeOut()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 화면을 페이드아웃 시키는 함수
//		  비동기적으로 작동(Render()를 거치지않고 여기서 계속 루프)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

void CScene::FadeOut()
{
	for (int step = 0; step < 100; step++) //100단계(%)
	{
		pd3dDevice->Clear(0, NULL, D3DCLEAR_TARGET, D3DCOLOR_XRGB(0, 0, 0), 1.0f, 0);
		if (SUCCEEDED(pd3dDevice->BeginScene()))
		{
			Render();
			DrawTexture(tBlack, 0, 0, 0, 0, screenWidth, screenHeight, 100 - step);
			pd3dDevice->EndScene();
		}
		pd3dDevice->Present(NULL, NULL, NULL, NULL);
	}
	Sleep(200);
}


//////////////////////////////////////////////////////////////////////////////////////////
// void BgmRepeatCheck()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 배경음악을 반복해서 재생되도록 하는 함수
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

void CScene::BgmRepeatCheck()
{
	long evCode;
	long param1;
	long param2;

	dshow->pEvent->GetEvent(&evCode, &param1, &param2, 0);
	if (evCode == EC_COMPLETE)
		dshow->pPosition->put_CurrentPosition(0);
}


//////////////////////////////////////////////////////////////////////////////////////////
// int GetSceneKind() const
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 현재 장면의 종류를 리턴하는 함수
// 리턴값 : int sceneKind(현재 장면의 종류를 담은 변수)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

int CScene::GetSceneKind() const
{
	return sceneKind;
}


//////////////////////////////////////////////////////////////////////////////////////////
// CCursor* GetCursor() const
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 마우스 커서 객체의 포인터를 리턴하는 함수
// 리턴값 : CCursor* cursor(마우스 커서 객체의 포인터)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

CCursor* CScene::GetCursor() const
{
	return cursor;
}