//
// 파일명 : CCursor.cpp
// 
// 설명 : 마우스 커서 클래스의 정의
//
// 김성후(lonkth@naver.com)
// 2010.01.03 최종 수정
//


#include "CCursor.h"


//////////////////////////////////////////////////////////////////////////////////////////
// CCursor(LPDIRECT3DDEVICE9 pd3dDevice, HWND hWnd, LPD3DXSPRITE sprite)
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CCursor 클래스의 생성자.
//		  수치데이터를 초기화한다.
//		  텍스쳐를 등록한다.
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

CCursor::CCursor(LPDIRECT3DDEVICE9 pd3dDevice, HWND hWnd, LPD3DXSPRITE sprite)
{
	this->hWnd = hWnd;
	this->sprite = sprite;

	//따로 커서의 크기가 변한다거나 애니메이션 속도가 변하진 않으므로 생성자에서 굳이 받지않았다.
	curState = NCURSOR;
	cursorWidth = 40;
	cursorHeight = 40;
	animationSpeed = 10; //한 프레임이 반복되는 횟수
	step = 0;
	nFrame = 4; //노멀 커서의 애니메이션 수
	sFrame = 3; //선택 커서의 애니메이션 수
	
	D3DXCreateTextureFromFile(pd3dDevice, "Texture\\Cursor\\NCursor.tga", &tNCursor);
	D3DXCreateTextureFromFile(pd3dDevice, "Texture\\Cursor\\SCursor.tga", &tSCursor);
}


//////////////////////////////////////////////////////////////////////////////////////////
// ~CCursor()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CCursor 클래스의 소멸자.
//		  텍스쳐를 해제한다.
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

CCursor::~CCursor()
{
	tNCursor->Release();
	tSCursor->Release();
}


//////////////////////////////////////////////////////////////////////////////////////////
// void DrawCursor()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 커서 이미지를 그리는 함수.
//		  멤버변수 AnimSpeed에 따른 속도로 애니메이션되는 이미지를 그린다.
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

void CCursor::DrawCursor()
{
	if (curState != NODRAW)
	{
		POINT ptCursor;
		GetCursorPos(&ptCursor);
		ScreenToClient(hWnd, &ptCursor);

		sprite->Begin(D3DXSPRITE_ALPHABLEND);
		RECT rect = {cursorWidth * (step / animationSpeed), 0, cursorWidth * (step / animationSpeed + 1), cursorHeight};
		D3DXVECTOR3 pos((float) ptCursor.x, (float) ptCursor.y, 0);
		sprite->Draw(curState == NCURSOR ? tNCursor : tSCursor, &rect, NULL, &pos, D3DCOLOR_RGBA(255, 255, 255, 255));
		sprite->End();
		step++;
		if (step >= (curState == NCURSOR ? nFrame * animationSpeed : sFrame * animationSpeed)) step = 0;
	}
}


//////////////////////////////////////////////////////////////////////////////////////////
// bool RButtonClick(), bool LButtonClick()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 마우스 (오른쪽, 왼쪽) 버튼이 클릭되었는지 체크하는 함수.
// 리턴값 : boolean값(클릭여부)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

bool CCursor::RButtonClick()
{
	if (GetAsyncKeyState(VK_RBUTTON))
	{
		return true;
	}
	else
	{
		return false;
	}
}

bool CCursor::LButtonClick()
{
	if (GetAsyncKeyState(VK_LBUTTON))
	{
		return true;
	}
	else
	{
		return false;
	}
}


//////////////////////////////////////////////////////////////////////////////////////////
// void SetCursorPoint()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 마우스 커서의 위치를 설정하는 함수.
// 인자 : int x, int y(이동될 커서의 위치 좌표)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

void CCursor::SetCursorPoint(int x, int y)
{
	SetCursorPos(x, y);
}


//////////////////////////////////////////////////////////////////////////////////////////
// POINT GetCursorPoint()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 마우스 커서의 위치를 얻을 수 있는 함수.
// 리턴값 : POINT ptCursor(마우스 커서의 위치 좌표)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

POINT CCursor::GetCursorPoint() const
{
	POINT ptCursor;
	GetCursorPos(&ptCursor);
	ScreenToClient(hWnd, &ptCursor); //현재 윈도우 기준의 좌표화한다.

	return ptCursor;
}


//////////////////////////////////////////////////////////////////////////////////////////
// void SetCursorState()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 마우스 커서의 상태를 설정하는 함수.
// 인자 : int val(바뀔 마우스 커서의 상태)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

void CCursor::SetCurState(int val)
{
	curState = val;
}


//////////////////////////////////////////////////////////////////////////////////////////
// int GetCursorState()
//////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 마우스 커서의 상태를 얻을 수 있는 함수.
// 리턴값 : int curState(마우스 커서의 상태)
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////

int CCursor::GetCurState() const
{
	return curState;
}