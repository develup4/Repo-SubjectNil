//
// 파일명 : CDivergeWnd.cpp
// 
// 설명 : CDivergeWnd 클래스 정의
//
// 김성후(lonkth@naver.com)
// 2010.01.20 최종 수정
//


#include "CDivergeWnd.h"
#define WIDTH 400
#define HEIGHT 100


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CDivergeWnd(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, CCursor* cursor, LPD3DXFONT pFont, int* sceneKind, CData* pData)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CDivergeWnd 클래스의 생성자.
//
// 2010.01.03 최종수정
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CDivergeWnd::CDivergeWnd(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, CCursor* cursor, LPD3DXFONT pFont, int* sceneKind, CData* pData) : CEventSprite(pd3dDevice, sprite, pFont)
{
	D3DXCreateTextureFromFile(pd3dDevice, "Texture\\Common\\Diverge.tga", &tDiverge);
	D3DXCreateTextureFromFile(pd3dDevice, "Texture\\Common\\DivergeSelect.tga", &tDivergeSelect);
	this->cursor = cursor;
	this->sceneKind = sceneKind;
	this->pData = pData;
}


/////////////////////////////////////////////////////////////////////////////////////
// ~CDivergeWnd()
/////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CDivergeWnd 클래스의 소멸자.
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

CDivergeWnd::~CDivergeWnd()
{
	tDiverge->Release();
	tDivergeSelect->Release();
}


/////////////////////////////////////////////////////////////////////////////////////
// void Draw()
/////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 분기창을 렌더링하는 함수.
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////

void CDivergeWnd::Draw()
{
	if (doDraw)
	{
		//분기창 렌더링
		sprite->Begin(D3DXSPRITE_ALPHABLEND);
		RECT rect = {0, 0, WIDTH, HEIGHT};
		D3DXVECTOR3 pos((float)x, (float)y, 0);
		sprite->Draw(MouseOnCheck() ? tDivergeSelect : tDiverge, &rect, NULL, &pos, D3DCOLOR_RGBA(255, 255, 255, 220));
		sprite->End();

		//분기내용 렌더링
		TextRender(text, x + 30, y + 40, x + WIDTH, y + HEIGHT, 255);
	}
}


/////////////////////////////////////////////////////////////////////////////////////
// bool MouseOnCheck()
/////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 마우스 커서가 현재 분기창 객체 위에 존재하는지를 검사하는 함수.
// 리턴값 : Boolean값(존재여부)
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

bool CDivergeWnd::MouseOnCheck()
{
	POINT ptCursor = cursor->GetCursorPoint();

	if(ptCursor.x >= x && ptCursor.x <= x + WIDTH && ptCursor.y >= y && ptCursor.y <= y + HEIGHT)
	{
		return true;
	}
	else
	{
		return false;
	}
}


/////////////////////////////////////////////////////////////////////////////////////
// void SetX(int val), void SetY(int val)
/////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 인자로 받은 값으로 분기창의 좌표를 설정하는 함수.
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

void CDivergeWnd::SetX(int val)
{
	x = val;
}

void CDivergeWnd::SetY(int val)
{
	y = val;
}


/////////////////////////////////////////////////////////////////////////////////////
// void SetText(char* str)
/////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 인자로 받은 값으로 분기창에 분기내용을 표시하는 함수.
// 인자 : char* str(분기내용의 문자열)
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

void CDivergeWnd::SetText(char* str)
{
	text = str;
}


/////////////////////////////////////////////////////////////////////////////////////
// void SetScriptFilePath(char* path)
/////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 인자로 받은 값으로 스크립트 파일경로를 저장하는 함수
//		  분기가 선택되어 스크립트를 교체할 때 사용한다.
// 인자 : char* path(스크립트 파일경로)
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

void CDivergeWnd::SetScriptFilePath(char* path)
{
	scriptFilePath = path;
}


/////////////////////////////////////////////////////////////////////////////////////
// char* GetScriptFilePath()
/////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 저장된 스크립트 파일경로를 반환받는 함수
//		    분기가 선택되어 스크립트를 교체할 때 사용한다.
// 리턴값 : char* scriptFilePath(스크립트 파일경로)
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

char* CDivergeWnd::GetScriptFilePath()
{
	return scriptFilePath;
}


/////////////////////////////////////////////////////////////////////////////////////
// void SetKindScript(int kind)
/////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 스크립트의 종류를 설정하는 함수
//		  종류는 BS(Battle Script)와 ES(EventScript가 있다)
// 인자 : int kind(스크립트 종류)
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

void CDivergeWnd::SetKindScript(int kind)
{
	kindScript = kind;
}


/////////////////////////////////////////////////////////////////////////////////////
// int GetKindScript()
/////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 스크립트의 종류를 반환하는 함수
//		    종류는 BS(Battle Script)와 ES(EventScript가 있다)
// 리턴값 : int kindScript(스크립트 종류)
//
// 2010.01.03 최종수정
/////////////////////////////////////////////////////////////////////////////////////

int CDivergeWnd::GetKindScript()
{
	return kindScript;
}