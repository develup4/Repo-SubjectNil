//
// 파일명 : CEventMap.cpp
// 
// 설명 : CEventMap 클래스 정의
//
// 김성후(lonkth@naver.com)
// 2010.01.03 최종 수정
//

#include "CEventMap.h"


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CEventMap(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, LPD3DXFONT pFont, int screenWidth, int screenHeight)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CEventMap 클래스의 생성자.
//		  여러가지 데이터를 초기화시키고 Map을 검은색 이미지로 초기화시킨다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CEventMap::CEventMap(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, LPD3DXFONT pFont, int screenWidth, int screenHeight) : CEventSprite(pd3dDevice, sprite, pFont), screenWidth(screenWidth), screenHeight(screenHeight)
{
	//initialize
	scrollX = 0;
	scrollY = 0;
	D3DXCreateTextureFromFile(pd3dDevice, "Texture\\Common\\Black.jpg", &tMap);
	doDraw = true;
}


////////////////////////////////////////////////////////////////////////////////////////////////
// ~CEventMap()
////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CEventMap 클래스의 소멸자.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////

CEventMap::~CEventMap()
{
	tMap->Release();
}


////////////////////////////////////////////////////////////////////////////////////////////////
// void Draw()
////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 맵을 렌더링하는 함수
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////

void CEventMap::Draw()
{
	if (doDraw)
	{
		sprite->Begin(D3DXSPRITE_ALPHABLEND);
		RECT rc = {scrollX, scrollY, scrollX + screenWidth, scrollY + screenHeight};
		D3DXVECTOR3 pos(0, 0, 0);
		sprite->Draw(tMap, &rc, NULL, &pos, D3DCOLOR_RGBA(255, 255, 255, 255));
		sprite->End();
	}
}


////////////////////////////////////////////////////////////////////////////////////////////////
// void SetMapTexture(char* FilePath)
////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 맵 텍스쳐를 등록시키는 함수
// 인자 : char* filePath(텍스쳐 이미지 파일경로)
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////

void CEventMap::SetMapTexture(char* filePath)
{
	D3DXCreateTextureFromFile(pd3dDevice, filePath, &tMap);
}


////////////////////////////////////////////////////////////////////////////////////////////////
// void SetScrollX(int dx), void SetScrollY(int dx)
////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 맵을 스크롤시키는 함수
// 인자 : dx와 dy. 즉! 변화량을 인자로 받는다. 절대값이 아니다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////

void CEventMap::SetScrollX(int dx)
{
	scrollX += dx;
}

void CEventMap::SetScrollY(int dy)
{
	scrollY += dy;
}


////////////////////////////////////////////////////////////////////////////////////////////////
// Int GetScrollX(), Int GetScrollY()
////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 맵의 스크롤 정도를 반환받는 함수
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////////

int CEventMap::GetScrollX() const
{
	return scrollX;
}

int CEventMap::GetScrollY() const
{
	return scrollY;
}