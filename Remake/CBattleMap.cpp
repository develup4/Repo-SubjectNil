//
// 파일명 : CBattleMap.cpp
// 
// 설명 : CBattleMap 클래스의 정의
//
// 김성후(lonkth@naver.com)
// 2010.01.20 최종 수정
//


#include "CBattleMap.h"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CBattleMap(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, CCursor* cursor, int mapX, int mapY, int screenWidth, int screenHeight, char* battleMapTexture)
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CBattleMap 클래스의 생성자.
//		  여러가지 데이터를 초기화시킨다.
//
// 2010.01.20 최종수정
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

CBattleMap ::CBattleMap(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, CCursor* cursor, int mapX, int mapY, int screenWidth, int screenHeight, char* battleMapTexture) : screenWidth(screenWidth), screenHeight(screenHeight)
{
	this->pd3dDevice = pd3dDevice;
	this->sprite = sprite;
	this->cursor = cursor;
	D3DXCreateTextureFromFile(pd3dDevice, battleMapTexture, &map);
	sx = 100;
	sy = 500;
	this->mapX = mapX;
	this->mapY = mapY;
	collideMap = new int*[mapY];
	for (int i = 0; i < mapY ; i++)
	{
		collideMap[i] = new int[mapX];
	}
}


/////////////////////////////////////////////////////////////////////////////////////////
// ~CBattleMap()
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CBattleMap 클래스의 소멸자.
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

CBattleMap::~CBattleMap()
{
	map->Release();
	for (int i = 0; i < mapY ; i++)
	{
		delete[] collideMap[i];
	}
	delete[] collideMap;
}


/////////////////////////////////////////////////////////////////////////////////////////
// void TakeAction()
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 객체의 행동함수이다.
//		  렌더링을 제외한 객체의 모든 처리를 이 함수에서 한다.
//		  본 객체에서는 마우스로 맵스크롤하는 부분을 처리한다.
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

void CBattleMap::TakeAction()
{
	if (cursor->GetCursorPoint().x < 50)
	{
		sx -= 20;
		if (sx < 0) sx = 0;
	}
	if (cursor->GetCursorPoint().x > 974)
	{
		sx += 20;
		if (sx > mapX * 32 - 1024) sx = mapX * 32 - 1024;
	}
	if (cursor->GetCursorPoint().y < 50)
	{
		sy -= 20;
		if (sy < 0) sy = 0;
	}
	if (cursor->GetCursorPoint().y > 718)
	{
		sy += 20;
		if (sy > mapY * 32 - 768) sy = mapY * 32 - 768;
	}
}


/////////////////////////////////////////////////////////////////////////////////////////
// void Draw()
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 객체의 렌더링 함수이다.
//		  객체의 텍스쳐 이미지를 렌더링한다.
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

void CBattleMap::Draw()
{
	sprite->Begin(D3DXSPRITE_ALPHABLEND);
	RECT rc = {sx, sy, sx + screenWidth, sy + screenHeight};
	D3DXVECTOR3 pos(0, 0, 0);
	sprite->Draw(map, &rc, NULL, &pos, D3DCOLOR_RGBA(255, 255, 255, 255));
	sprite->End();
}


/////////////////////////////////////////////////////////////////////////////////////////
// void SetCollideMap(int x, int y, int value)
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 충돌행렬의 한 성분을 설정하는 함수이다.
// 인자 : int x, int y(맵에서의 좌표), int value(충돌행렬에 저장할 값)
//		  Boolean값이 아닌 int형을 쓰는 이유는 가고/못가고 이외의 다른 값이
//		  나중에 생길수도 있으므로
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

void CBattleMap::SetCollideMap(int x, int y, int value)
{
	collideMap[y][x] = value;
}


/////////////////////////////////////////////////////////////////////////////////////////
// int GetSX(), int GetSY()
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 스크롤된 정도를 반환받는 함수
// 리턴값 : int sx, int sy
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

int CBattleMap::GetSX()
{
	return sx;
}

int CBattleMap::GetSY()
{
	return sy;
}


/////////////////////////////////////////////////////////////////////////////////////////
// int GetMapX(), int GetMapY()
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 맵의 크기를 반환받는 함수
// 리턴값 : int mapX, int mapY
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

int CBattleMap::GetMapX()
{
	return mapX;
}

int CBattleMap::GetMapY()
{
	return mapY;
}


/////////////////////////////////////////////////////////////////////////////////////////
// bool GetMovable(int x, int y)
/////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 인자로 받아온 셀좌표에 캐릭터가 이동할 수 있는지 판단하는 함수
// 인  자 : int x, int y(조사를 원하는 셀좌표)
// 리턴값 : Boolean값(가능/불가능)
//
// 2010.01.20 최종수정
/////////////////////////////////////////////////////////////////////////////////////////

bool CBattleMap::GetMovable(int x, int y)
{
	if (collideMap[y][x] == 0)
		return true;
	else
		return false;
}