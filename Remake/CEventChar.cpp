//
// 파일명 : CEventChar.cpp
// 
// 설명 : CEventChar 클래스 정의
//
// 김성후(lonkth@naver.com)
// 2010.01.03 최종 수정
//


#include "CEventChar.h"
#pragma warning(disable : 4996)


////////////////////////////////////////////////////////////////////////////////////////////
// CEventChar(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, LPD3DXFONT pFont)
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CEventChar 클래스의 생성자.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

CEventChar::CEventChar(LPDIRECT3DDEVICE9 pd3dDevice, LPD3DXSPRITE sprite, LPD3DXFONT pFont) : CEventSprite(pd3dDevice, sprite, pFont)
{
	doDraw = true;
	step = 0;
}


////////////////////////////////////////////////////////////////////////////////////////////
// ~CEventChar()
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : CEventChar 클래스의 소멸자.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

CEventChar::~CEventChar()
{
	tImage->Release();
}


////////////////////////////////////////////////////////////////////////////////////////////
// void Draw()
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 캐릭터를 렌더링하는 함수
//		  스프라이트 이미지의 배치를 잘 활용하여 코드를 줄인다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

void CEventChar::Draw()
{
	//캐릭터의 크기는 32*48

	if(doDraw)
	{
		sprite->Begin(D3DXSPRITE_ALPHABLEND);
		RECT rc = {(step / 10) * 32, direction * 48, (step / 10) * 32 + 32, direction * 48 + 48};
		D3DXVECTOR3 pos;
		pos.z = 0.0f;
		switch(direction)
		{
		case DOWN:
			{
				pos.x = (float)x * 32;
				pos.y = (float)y * 32 + ((step / 10) * 8) - 20; //20 : 캐릭터가 세로로 더 길기 때문
				break;
			}
		case LEFT:
			{
				pos.x = (float)x * 32 - ((step / 10) * 8);
				pos.y = (float)y * 32 - 20;
				break;
			}
		case RIGHT:
			{
				pos.x = (float)x * 32 + ((step / 10) * 8);
				pos.y = (float)y * 32 - 20;
				break;
			}
		case UP:
			{
				pos.x = (float)x * 32;
				pos.y = (float)y * 32 - ((step / 10) * 8) - 20;
				break;
			}
		}
		sprite->Draw(tImage, &rc, NULL, &pos, D3DCOLOR_RGBA(255, 255, 255, 255));
		sprite->End();
	}
}

void CEventChar::SetID(char* id)
{
	strcpy(this->id, id);
}


////////////////////////////////////////////////////////////////////////////////////////////
// void SetX(int x), void SetY(int y)
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 인자로 받은 값만큼 캐릭터의 좌표를 설정하는 함수들
// 인자 : 인자로 받은 x와 y는 픽셀좌표가 아니라 게임내에서 32*32크기의 셀좌표다!
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

void CEventChar::SetX(int x)
{
	this->x = x;
}

void CEventChar::SetY(int y)
{
	this->y = y;
}


////////////////////////////////////////////////////////////////////////////////////////////
// void SetDirection(char* direction)
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 인자로 받은 방향대로 캐릭터의 방향을 설정하는 함수들
//		  인자를 스크립트에서 문자열로 바로 받아오기때문에 문자열을 판단해서 결정한다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

void CEventChar::SetDirection(char* direction)
{
	if (strcmp(direction, "UP") == 0) this->direction = UP;
	else if (strcmp(direction, "DOWN") == 0) this->direction = DOWN;
	else if (strcmp(direction, "LEFT") == 0) this->direction = LEFT;
	else this->direction = RIGHT;
}


////////////////////////////////////////////////////////////////////////////////////////////
// void SetTexturePath(char* path)
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 캐릭터의 텍스쳐 파일경로를 설정하는 함수이다.
//		  설정된 경로대로 텍스쳐를 등록하는 함수이다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

void CEventChar::SetTexturePath(char* path)
{
	strcpy(texturePath, path);
	D3DXCreateTextureFromFile(pd3dDevice, path, &tImage);
}


////////////////////////////////////////////////////////////////////////////////////////////
// char* GetID()
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 캐릭터의 ID를 얻어오는 함수이다.
// 리턴값 : char* id(캐릭터 고유의 구분자)
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

char* CEventChar::GetID()
{
	return id;
}


////////////////////////////////////////////////////////////////////////////////////////////
// int GetX(), int GetY()
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 캐릭터의 좌표를 얻어오는 함수이다.
// 리턴값 : 픽셀좌표가 아니라 게임내의 32*32의 셀좌표이다!
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

int CEventChar::GetX()
{
	return x;
}

int CEventChar::GetY()
{
	return y;
}


////////////////////////////////////////////////////////////////////////////////////////////
// int GetDirection()
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 캐릭터의 방향을 얻어오는 함수이다.
// 리턴값 : int direction(정수형으로 위에서 정의한 상수를 이용한다)
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

int CEventChar::GetDirection()
{
	return direction;
}


////////////////////////////////////////////////////////////////////////////////////////////
// char* GetTexturePath(char* path)
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설  명 : 캐릭터의 텍스쳐 파일경로를 얻어오는 함수이다.
// 리턴값 : char* texturePath
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

char* CEventChar::GetTexturePath()
{
	return texturePath;
}


////////////////////////////////////////////////////////////////////////////////////////////
// void Step()
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 캐릭터가 이동할때마다 호출하는 함수이다.
//		  한 루프마다 이 함수가 호출되게되고 애니메이션 스피드에 맞춰
//		  적절히 프레임을 다음장으로 넘기고,
//		  방향에 맞춰 좌표를 이동시킨다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

void CEventChar::Step()
{
	step++;
	if (step == 4 * 10) //10은 애니메이션 스피드로 동일한 그림이 반복되는 횟수를 말한다
	{
		switch(direction)
		{
		case DOWN:
			{
				y++;
				break;
			}
		case LEFT:
			{
				x--;
				break;
			}
		case RIGHT:
			{
				x++;
				break;
			}
		case UP:
			{
				y--;
				break;
			}
		}
		step = 0;
	}
}


////////////////////////////////////////////////////////////////////////////////////////////
// void ChangeDirection(int direction)
////////////////////////////////////////////////////////////////////////////////////////////
//
// 설명 : 인자로 받아온 방향으로 캐릭터의 방향을 변화시키는 함수이다.
//		  SetDirection함수와는 달리 인자로 정수형을 받아온다.
//		  인자는 상수로 정해놓은 방향을 이용한다.
//
// 2010.01.03 최종수정
////////////////////////////////////////////////////////////////////////////////////////////

void CEventChar::ChangeDirection(int direction)
{
	this->direction = direction;
}